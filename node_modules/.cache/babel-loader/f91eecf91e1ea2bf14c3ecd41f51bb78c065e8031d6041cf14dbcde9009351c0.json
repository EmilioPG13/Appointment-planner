{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Emili\\\\Desktop\\\\appointment-planner-starting-v18\\\\src\\\\containers\\\\contactsPage\\\\ContactsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\nimport { TileList } from \"../../components/tileList/TileList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContactsPage = props => {\n  _s();\n  /* State variables for contact info and duplicate check  */\n  const [currentName, setCurrentName] = useState('');\n  const [currentPhone, setCurrentPhone] = useState('');\n  const [currentEmail, setCurrentEmail] = useState('');\n  const [duplicates, setDuplicates] = useState(false);\n  const [alert, setAlert] = useState('');\n  const handleSubmit = e => {\n    e.preventDefault();\n    /* Add contact info and clear data if the contact name is not a duplicate */\n    if (!duplicates) {\n      props.addContact(currentName, currentPhone, currentEmail);\n      setCurrentName('');\n      setCurrentPhone('');\n      setCurrentEmail('');\n    }\n  };\n\n  /* Using hooks, check for contact name in the contacts array variable in props */\n  useEffect(() => {\n    for (const contactItem of props.contacts) {\n      if (contactItem.name === currentName) {\n        if (!duplicates) {\n          setDuplicates(true);\n          setAlert;\n        }\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(ContactsPage, \"MhdjTfalS9QVaGthHl+LKEyTs3g=\");\n_c = ContactsPage;\nvar _c;\n$RefreshReg$(_c, \"ContactsPage\");","map":{"version":3,"names":["React","useState","useEffect","ContactForm","TileList","jsxDEV","_jsxDEV","ContactsPage","props","_s","currentName","setCurrentName","currentPhone","setCurrentPhone","currentEmail","setCurrentEmail","duplicates","setDuplicates","alert","setAlert","handleSubmit","e","preventDefault","addContact","contactItem","contacts","name","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Emili/Desktop/appointment-planner-starting-v18/src/containers/contactsPage/ContactsPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\n\r\nexport const ContactsPage = (props) => {\r\n  /* State variables for contact info and duplicate check  */\r\n  const [currentName, setCurrentName] = useState('');\r\n  const [currentPhone, setCurrentPhone] = useState('');\r\n  const [currentEmail, setCurrentEmail] = useState('');\r\n  const [duplicates, setDuplicates] = useState(false);\r\n  const [alert, setAlert] = useState('');\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    /* Add contact info and clear data if the contact name is not a duplicate */\r\n    if(!duplicates) {\r\n      props.addContact(currentName, currentPhone, currentEmail);\r\n      setCurrentName('');\r\n      setCurrentPhone('');\r\n      setCurrentEmail('');\r\n    }\r\n  };\r\n\r\n  /* Using hooks, check for contact name in the contacts array variable in props */\r\n  useEffect(() => {\r\n\r\n    for(const contactItem of props.contacts) {\r\n      if (contactItem.name === currentName) {\r\n        if (!duplicates) {\r\n          setDuplicates(true);\r\n          setAlert\r\n        }\r\n      }\r\n    }\r\n  })\r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Contact</h2> \r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Contacts</h2>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAElD,SAASC,WAAW,QAAQ,0CAA0C;AACtE,SAASC,QAAQ,QAAQ,oCAAoC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9D,OAAO,MAAMC,YAAY,GAAIC,KAAK,IAAK;EAAAC,EAAA;EACrC;EACA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACW,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACa,YAAY,EAAEC,eAAe,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACe,UAAU,EAAEC,aAAa,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACiB,KAAK,EAAEC,QAAQ,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMmB,YAAY,GAAIC,CAAC,IAAK;IAC1BA,CAAC,CAACC,cAAc,EAAE;IAClB;IACA,IAAG,CAACN,UAAU,EAAE;MACdR,KAAK,CAACe,UAAU,CAACb,WAAW,EAAEE,YAAY,EAAEE,YAAY,CAAC;MACzDH,cAAc,CAAC,EAAE,CAAC;MAClBE,eAAe,CAAC,EAAE,CAAC;MACnBE,eAAe,CAAC,EAAE,CAAC;IACrB;EACF,CAAC;;EAED;EACAb,SAAS,CAAC,MAAM;IAEd,KAAI,MAAMsB,WAAW,IAAIhB,KAAK,CAACiB,QAAQ,EAAE;MACvC,IAAID,WAAW,CAACE,IAAI,KAAKhB,WAAW,EAAE;QACpC,IAAI,CAACM,UAAU,EAAE;UACfC,aAAa,CAAC,IAAI,CAAC;UACnBE,QAAQ;QACV;MACF;IACF;EACF,CAAC,CAAC;EAEF,oBACEb,OAAA;IAAAqB,QAAA,gBACErB,OAAA;MAAAqB,QAAA,eACErB,OAAA;QAAAqB,QAAA,EAAI;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAK;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACZ,eACVzB,OAAA;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAM,eACNzB,OAAA;MAAAqB,QAAA,eACErB,OAAA;QAAAqB,QAAA,EAAI;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAK;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACT;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACN;AAEV,CAAC;AAACtB,EAAA,CA3CWF,YAAY;AAAAyB,EAAA,GAAZzB,YAAY;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}